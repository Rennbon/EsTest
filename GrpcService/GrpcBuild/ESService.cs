// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ESService.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Elasticsearch {

  /// <summary>Holder for reflection information generated from ESService.proto</summary>
  public static partial class ESServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for ESService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ESServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9FU1NlcnZpY2UucHJvdG8SDUVsYXN0aWNzZWFyY2giKgoNRXhlY3V0ZVJl",
            "c3VsdBIMCgRjb2RlGAEgASgFEgsKA21zZxgCIAEoCSLeAQoSU2VhcmNoVGFz",
            "a3NSZXF1ZXN0EhIKCmN1cnJlbnRBSWQYASABKAkSFAoMcmVsYXRpb25BSWRz",
            "GAIgAygJEg8KB2tleXdvcmQYAyABKAkSEQoJcHJvamVjdElkGAQgASgJEg4K",
            "BmlzUGFpZBgFIAEoCBIRCglwYWdlSW5kZXgYBiABKAUSEAoIcGFnZVNpemUY",
            "ByABKAUSEQoJc3RhcnRUaW1lGAggASgDEg8KB2VuZFRpbWUYCSABKAMSDwoH",
            "cHJlVGFncxgKIAEoCRIQCghwb3N0VGFncxgLIAEoCSJVChFTZWFyY2hUYXNr",
            "c1Jlc3VsdBIMCgRjb2RlGAEgASgFEgsKA21zZxgCIAEoCRIlCgV0YXNrcxgD",
            "IAMoCzIWLkVsYXN0aWNzZWFyY2guVGFza0R0byJYCh1BZGRBdHRhY2htZW50",
            "c0ludG9UYXNrUmVxdWVzdBIOCgZ0YXNrSWQYASABKAkSJwoEYXR0cxgCIAMo",
            "CzIZLkVsYXN0aWNzZWFyY2guQXR0YWNobWVudCJBCh5SZW1vdmVBdHRhY2ht",
            "ZW50c0luVGFza1JlcXVlc3QSDgoGdGFza0lkGAEgASgJEg8KB2ZpbGVJZHMY",
            "AiADKAkiaAoeQWRkVGFza0Rpc2N1c3Npb25JblRhc2tSZXF1ZXN0Eg4KBnRh",
            "c2tJZBgBIAEoCRIOCgZkaXNjSWQYAiABKAkSDwoHbWVzc2FnZRgDIAEoCRIV",
            "Cg1tZW50aW9uZWRBSWRzGAQgAygJIj0KG1JlbW92ZVRhc2tEaXNjdXNzaW9u",
            "UmVxdWVzdBIOCgZ0YXNrSWQYASABKAkSDgoGZGlzY0lkGAIgASgJIkAKElVw",
            "ZGF0ZVRhc2tzUmVxdWVzdBIqCgdtZXRob2RzGAEgAygLMhkuRWxhc3RpY3Nl",
            "YXJjaC5UYXNrTWV0aG9kIjUKD0FkZFRhc2tzUmVxdWVzdBIiCgV0YXNrcxgB",
            "IAMoCzITLkVsYXN0aWNzZWFyY2guVGFzayIuChtSZW1vdmVUYXNrc0J5VGFz",
            "a0lkc1JlcXVlc3QSDwoHdGFza0lkcxgBIAMoCSIwChxSZW1vdmVUYXNrc0J5",
            "Rm9sZGVySWRSZXF1ZXN0EhAKCGZvbGRlcklkGAEgASgJIk4KJlVwZGF0ZVRh",
            "c2tzRm9sZGVyTmFtZUJ5Rm9sZGVySWRSZXF1ZXN0EhAKCGZvbGRlcklkGAEg",
            "ASgJEhIKCmZvbGRlck5hbWUYAiABKAkiLwobVW5sb2NrRm9sZGVyQW5kVGFz",
            "a3NSZXF1ZXN0EhAKCGZvbGRlcklkGAEgASgJIi0KCkF0dGFjaG1lbnQSDgoG",
            "ZmlsZUlkGAEgASgJEg8KB2NvbnRlbnQYAiABKAkilQMKClRhc2tNZXRob2QS",
            "MAoGbWV0aG9kGAEgASgOMiAuRWxhc3RpY3NlYXJjaC5UYXNrTWV0aG9kLk1l",
            "dGhvZBIhCgR0YXNrGAIgASgLMhMuRWxhc3RpY3NlYXJjaC5UYXNrIrECCgZN",
            "ZXRob2QSCwoHRGVmYXVsdBAAEhIKDlNldF9VcGRhdGVUaW1lEAESFwoTU2V0",
            "X0NyZWF0ZUFjY291bnRJZBACEhAKDFNldF9UYXNrTmFtZRADEhAKDFNldF9G",
            "b2xkZXJJZBAEEhIKDlNldF9Gb2xkZXJOYW1lEAUSEAoMU2V0X1BhcmVudElk",
            "EAYSDwoLU2V0X0NvbnRlbnQQBxIRCg1TZXRfU3RhcnRUaW1lEAgSDwoLU2V0",
            "X0VuZFRpbWUQCRIOCgpTZXRfQ2hhcmdlEAoSDgoKU2V0X1N0YXR1cxALEhQK",
            "EFNldF9Db21wbGV0ZVRpbWUQDBIQCgxTZXRfS2V5d29yZHMQDRISCg5QdWxs",
            "X01lbWJlcklkcxAOEhIKDlB1c2hfTWVtYmVySWRzEA8i4wIKBFRhc2sSDgoG",
            "dGFza0lkGAEgASgJEhAKCHRhc2tOYW1lGAIgASgJEhAKCGZvbGRlcklkGAMg",
            "ASgJEhIKCmZvbGRlck5hbWUYBCABKAkSEAoIcGFyZW50SWQYBSABKAkSDwoH",
            "Y29udGVudBgGIAEoCRIRCglzdGFydFRpbWUYByABKAMSDwoHZW5kVGltZRgI",
            "IAEoAxIRCgljaGFyZ2VBSWQYCSABKAkSDgoGc3RhdHVzGAogASgFEhQKDGNv",
            "bXBsZXRlVGltZRgLIAEoAxIRCgltZW1iZXJJZHMYDCADKAkSEAoIa2V5d29y",
            "ZHMYDSADKAkSDQoFYXBwSWQYDiABKAkSEQoJaXNEZWxldGVkGA8gASgIEhIK",
            "CnVwZGF0ZVRpbWUYECABKAMSEgoKY3JlYXRlVGltZRgRIAEoAxIRCglwcm9q",
            "ZWN0SWQYEiABKAkSEQoJY3JlYXRlQUlkGBMgASgJInYKB1Rhc2tEdG8SDgoG",
            "dGFza0lkGAEgASgJEhEKCWNyZWF0ZUFpZBgCIAEoCRIQCgh0YXNrTmFtZRgD",
            "IAEoCRIPCgdjb250ZW50GAQgASgJEhEKCXByb2plY3RJZBgFIAEoCRISCgpj",
            "cmVhdGVUaW1lGAYgASgDMscICglFU1NlcnZpY2USVAoLU2VhcmNoVGFza3MS",
            "IS5FbGFzdGljc2VhcmNoLlNlYXJjaFRhc2tzUmVxdWVzdBogLkVsYXN0aWNz",
            "ZWFyY2guU2VhcmNoVGFza3NSZXN1bHQiABJmChZBZGRBdHRhY2htZW50c0lu",
            "dG9UYXNrEiwuRWxhc3RpY3NlYXJjaC5BZGRBdHRhY2htZW50c0ludG9UYXNr",
            "UmVxdWVzdBocLkVsYXN0aWNzZWFyY2guRXhlY3V0ZVJlc3VsdCIAEmgKF1Jl",
            "bW92ZUF0dGFjaG1lbnRzSW5UYXNrEi0uRWxhc3RpY3NlYXJjaC5SZW1vdmVB",
            "dHRhY2htZW50c0luVGFza1JlcXVlc3QaHC5FbGFzdGljc2VhcmNoLkV4ZWN1",
            "dGVSZXN1bHQiABJoChdBZGRUYXNrRGlzY3Vzc2lvbkluVGFzaxItLkVsYXN0",
            "aWNzZWFyY2guQWRkVGFza0Rpc2N1c3Npb25JblRhc2tSZXF1ZXN0GhwuRWxh",
            "c3RpY3NlYXJjaC5FeGVjdXRlUmVzdWx0IgASYgoUUmVtb3ZlVGFza0Rpc2N1",
            "c3Npb24SKi5FbGFzdGljc2VhcmNoLlJlbW92ZVRhc2tEaXNjdXNzaW9uUmVx",
            "dWVzdBocLkVsYXN0aWNzZWFyY2guRXhlY3V0ZVJlc3VsdCIAElAKC1VwZGF0",
            "ZVRhc2tzEiEuRWxhc3RpY3NlYXJjaC5VcGRhdGVUYXNrc1JlcXVlc3QaHC5F",
            "bGFzdGljc2VhcmNoLkV4ZWN1dGVSZXN1bHQiABJKCghBZGRUYXNrcxIeLkVs",
            "YXN0aWNzZWFyY2guQWRkVGFza3NSZXF1ZXN0GhwuRWxhc3RpY3NlYXJjaC5F",
            "eGVjdXRlUmVzdWx0IgASYgoUUmVtb3ZlVGFza3NCeVRhc2tJZHMSKi5FbGFz",
            "dGljc2VhcmNoLlJlbW92ZVRhc2tzQnlUYXNrSWRzUmVxdWVzdBocLkVsYXN0",
            "aWNzZWFyY2guRXhlY3V0ZVJlc3VsdCIAEmQKFVJlbW92ZVRhc2tzQnlGb2xk",
            "ZXJJZBIrLkVsYXN0aWNzZWFyY2guUmVtb3ZlVGFza3NCeUZvbGRlcklkUmVx",
            "dWVzdBocLkVsYXN0aWNzZWFyY2guRXhlY3V0ZVJlc3VsdCIAEngKH1VwZGF0",
            "ZVRhc2tzRm9sZGVyTmFtZUJ5Rm9sZGVySWQSNS5FbGFzdGljc2VhcmNoLlVw",
            "ZGF0ZVRhc2tzRm9sZGVyTmFtZUJ5Rm9sZGVySWRSZXF1ZXN0GhwuRWxhc3Rp",
            "Y3NlYXJjaC5FeGVjdXRlUmVzdWx0IgASYgoUVW5sb2NrRm9sZGVyQW5kVGFz",
            "a3MSKi5FbGFzdGljc2VhcmNoLlVubG9ja0ZvbGRlckFuZFRhc2tzUmVxdWVz",
            "dBocLkVsYXN0aWNzZWFyY2guRXhlY3V0ZVJlc3VsdCIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.ExecuteResult), global::Elasticsearch.ExecuteResult.Parser, new[]{ "Code", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.SearchTasksRequest), global::Elasticsearch.SearchTasksRequest.Parser, new[]{ "CurrentAId", "RelationAIds", "Keyword", "ProjectId", "IsPaid", "PageIndex", "PageSize", "StartTime", "EndTime", "PreTags", "PostTags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.SearchTasksResult), global::Elasticsearch.SearchTasksResult.Parser, new[]{ "Code", "Msg", "Tasks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.AddAttachmentsIntoTaskRequest), global::Elasticsearch.AddAttachmentsIntoTaskRequest.Parser, new[]{ "TaskId", "Atts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.RemoveAttachmentsInTaskRequest), global::Elasticsearch.RemoveAttachmentsInTaskRequest.Parser, new[]{ "TaskId", "FileIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.AddTaskDiscussionInTaskRequest), global::Elasticsearch.AddTaskDiscussionInTaskRequest.Parser, new[]{ "TaskId", "DiscId", "Message", "MentionedAIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.RemoveTaskDiscussionRequest), global::Elasticsearch.RemoveTaskDiscussionRequest.Parser, new[]{ "TaskId", "DiscId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.UpdateTasksRequest), global::Elasticsearch.UpdateTasksRequest.Parser, new[]{ "Methods" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.AddTasksRequest), global::Elasticsearch.AddTasksRequest.Parser, new[]{ "Tasks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.RemoveTasksByTaskIdsRequest), global::Elasticsearch.RemoveTasksByTaskIdsRequest.Parser, new[]{ "TaskIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.RemoveTasksByFolderIdRequest), global::Elasticsearch.RemoveTasksByFolderIdRequest.Parser, new[]{ "FolderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.UpdateTasksFolderNameByFolderIdRequest), global::Elasticsearch.UpdateTasksFolderNameByFolderIdRequest.Parser, new[]{ "FolderId", "FolderName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.UnlockFolderAndTasksRequest), global::Elasticsearch.UnlockFolderAndTasksRequest.Parser, new[]{ "FolderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.Attachment), global::Elasticsearch.Attachment.Parser, new[]{ "FileId", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.TaskMethod), global::Elasticsearch.TaskMethod.Parser, new[]{ "Method", "Task" }, null, new[]{ typeof(global::Elasticsearch.TaskMethod.Types.Method) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.Task), global::Elasticsearch.Task.Parser, new[]{ "TaskId", "TaskName", "FolderId", "FolderName", "ParentId", "Content", "StartTime", "EndTime", "ChargeAId", "Status", "CompleteTime", "MemberIds", "Keywords", "AppId", "IsDeleted", "UpdateTime", "CreateTime", "ProjectId", "CreateAId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Elasticsearch.TaskDto), global::Elasticsearch.TaskDto.Parser, new[]{ "TaskId", "CreateAid", "TaskName", "Content", "ProjectId", "CreateTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  ///操作执行结果
  /// </summary>
  public sealed partial class ExecuteResult : pb::IMessage<ExecuteResult> {
    private static readonly pb::MessageParser<ExecuteResult> _parser = new pb::MessageParser<ExecuteResult>(() => new ExecuteResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteResult(ExecuteResult other) : this() {
      code_ = other.code_;
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteResult Clone() {
      return new ExecuteResult(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///*
    ///执行结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    /// <summary>
    ///*
    ///信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteResult other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///任务搜索
  /// </summary>
  public sealed partial class SearchTasksRequest : pb::IMessage<SearchTasksRequest> {
    private static readonly pb::MessageParser<SearchTasksRequest> _parser = new pb::MessageParser<SearchTasksRequest>(() => new SearchTasksRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchTasksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchTasksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchTasksRequest(SearchTasksRequest other) : this() {
      currentAId_ = other.currentAId_;
      relationAIds_ = other.relationAIds_.Clone();
      keyword_ = other.keyword_;
      projectId_ = other.projectId_;
      isPaid_ = other.isPaid_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      preTags_ = other.preTags_;
      postTags_ = other.postTags_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchTasksRequest Clone() {
      return new SearchTasksRequest(this);
    }

    /// <summary>Field number for the "currentAId" field.</summary>
    public const int CurrentAIdFieldNumber = 1;
    private string currentAId_ = "";
    /// <summary>
    ///*
    ///操作用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAId {
      get { return currentAId_; }
      set {
        currentAId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "relationAIds" field.</summary>
    public const int RelationAIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_relationAIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> relationAIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    ///关联用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RelationAIds {
      get { return relationAIds_; }
    }

    /// <summary>Field number for the "keyword" field.</summary>
    public const int KeywordFieldNumber = 3;
    private string keyword_ = "";
    /// <summary>
    ///*
    ///关键字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Keyword {
      get { return keyword_; }
      set {
        keyword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 4;
    private string projectId_ = "";
    /// <summary>
    ///*
    ///网络id（与好友协作："",全部网络"all"）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isPaid" field.</summary>
    public const int IsPaidFieldNumber = 5;
    private bool isPaid_;
    /// <summary>
    ///*
    ///是否付费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPaid {
      get { return isPaid_; }
      set {
        isPaid_ = value;
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 6;
    private int pageIndex_;
    /// <summary>
    ///*
    ///请求页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 7;
    private int pageSize_;
    /// <summary>
    ///*
    ///请求页面尺寸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 8;
    private long startTime_;
    /// <summary>
    ///*
    ///开始时间（没有开始时间:0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 9;
    private long endTime_;
    /// <summary>
    ///*
    ///截止时间（没有截止时间:0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "preTags" field.</summary>
    public const int PreTagsFieldNumber = 10;
    private string preTags_ = "";
    /// <summary>
    ///*
    ///高亮前缀
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreTags {
      get { return preTags_; }
      set {
        preTags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "postTags" field.</summary>
    public const int PostTagsFieldNumber = 11;
    private string postTags_ = "";
    /// <summary>
    ///*
    ///高亮后缀
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PostTags {
      get { return postTags_; }
      set {
        postTags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchTasksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchTasksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentAId != other.CurrentAId) return false;
      if(!relationAIds_.Equals(other.relationAIds_)) return false;
      if (Keyword != other.Keyword) return false;
      if (ProjectId != other.ProjectId) return false;
      if (IsPaid != other.IsPaid) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (PreTags != other.PreTags) return false;
      if (PostTags != other.PostTags) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentAId.Length != 0) hash ^= CurrentAId.GetHashCode();
      hash ^= relationAIds_.GetHashCode();
      if (Keyword.Length != 0) hash ^= Keyword.GetHashCode();
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (IsPaid != false) hash ^= IsPaid.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (PreTags.Length != 0) hash ^= PreTags.GetHashCode();
      if (PostTags.Length != 0) hash ^= PostTags.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentAId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CurrentAId);
      }
      relationAIds_.WriteTo(output, _repeated_relationAIds_codec);
      if (Keyword.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Keyword);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProjectId);
      }
      if (IsPaid != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsPaid);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PageSize);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(EndTime);
      }
      if (PreTags.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PreTags);
      }
      if (PostTags.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PostTags);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentAId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAId);
      }
      size += relationAIds_.CalculateSize(_repeated_relationAIds_codec);
      if (Keyword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Keyword);
      }
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (IsPaid != false) {
        size += 1 + 1;
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (PreTags.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreTags);
      }
      if (PostTags.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PostTags);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchTasksRequest other) {
      if (other == null) {
        return;
      }
      if (other.CurrentAId.Length != 0) {
        CurrentAId = other.CurrentAId;
      }
      relationAIds_.Add(other.relationAIds_);
      if (other.Keyword.Length != 0) {
        Keyword = other.Keyword;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.IsPaid != false) {
        IsPaid = other.IsPaid;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.PreTags.Length != 0) {
        PreTags = other.PreTags;
      }
      if (other.PostTags.Length != 0) {
        PostTags = other.PostTags;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CurrentAId = input.ReadString();
            break;
          }
          case 18: {
            relationAIds_.AddEntriesFrom(input, _repeated_relationAIds_codec);
            break;
          }
          case 26: {
            Keyword = input.ReadString();
            break;
          }
          case 34: {
            ProjectId = input.ReadString();
            break;
          }
          case 40: {
            IsPaid = input.ReadBool();
            break;
          }
          case 48: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 56: {
            PageSize = input.ReadInt32();
            break;
          }
          case 64: {
            StartTime = input.ReadInt64();
            break;
          }
          case 72: {
            EndTime = input.ReadInt64();
            break;
          }
          case 82: {
            PreTags = input.ReadString();
            break;
          }
          case 90: {
            PostTags = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///任务搜索返回值
  /// </summary>
  public sealed partial class SearchTasksResult : pb::IMessage<SearchTasksResult> {
    private static readonly pb::MessageParser<SearchTasksResult> _parser = new pb::MessageParser<SearchTasksResult>(() => new SearchTasksResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchTasksResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchTasksResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchTasksResult(SearchTasksResult other) : this() {
      code_ = other.code_;
      msg_ = other.msg_;
      tasks_ = other.tasks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchTasksResult Clone() {
      return new SearchTasksResult(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///*
    ///执行结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    /// <summary>
    ///*
    ///信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Elasticsearch.TaskDto> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(26, global::Elasticsearch.TaskDto.Parser);
    private readonly pbc::RepeatedField<global::Elasticsearch.TaskDto> tasks_ = new pbc::RepeatedField<global::Elasticsearch.TaskDto>();
    /// <summary>
    ///*
    ///任务集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Elasticsearch.TaskDto> Tasks {
      get { return tasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchTasksResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchTasksResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Msg != other.Msg) return false;
      if(!tasks_.Equals(other.tasks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      hash ^= tasks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      tasks_.WriteTo(output, _repeated_tasks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchTasksResult other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      tasks_.Add(other.tasks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 26: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///添加附件
  /// </summary>
  public sealed partial class AddAttachmentsIntoTaskRequest : pb::IMessage<AddAttachmentsIntoTaskRequest> {
    private static readonly pb::MessageParser<AddAttachmentsIntoTaskRequest> _parser = new pb::MessageParser<AddAttachmentsIntoTaskRequest>(() => new AddAttachmentsIntoTaskRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddAttachmentsIntoTaskRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAttachmentsIntoTaskRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAttachmentsIntoTaskRequest(AddAttachmentsIntoTaskRequest other) : this() {
      taskId_ = other.taskId_;
      atts_ = other.atts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAttachmentsIntoTaskRequest Clone() {
      return new AddAttachmentsIntoTaskRequest(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    /// <summary>
    ///*
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "atts" field.</summary>
    public const int AttsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Elasticsearch.Attachment> _repeated_atts_codec
        = pb::FieldCodec.ForMessage(18, global::Elasticsearch.Attachment.Parser);
    private readonly pbc::RepeatedField<global::Elasticsearch.Attachment> atts_ = new pbc::RepeatedField<global::Elasticsearch.Attachment>();
    /// <summary>
    ///*
    ///附件集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Elasticsearch.Attachment> Atts {
      get { return atts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddAttachmentsIntoTaskRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddAttachmentsIntoTaskRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if(!atts_.Equals(other.atts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      hash ^= atts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      atts_.WriteTo(output, _repeated_atts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      size += atts_.CalculateSize(_repeated_atts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddAttachmentsIntoTaskRequest other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      atts_.Add(other.atts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            atts_.AddEntriesFrom(input, _repeated_atts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///删除附件
  /// </summary>
  public sealed partial class RemoveAttachmentsInTaskRequest : pb::IMessage<RemoveAttachmentsInTaskRequest> {
    private static readonly pb::MessageParser<RemoveAttachmentsInTaskRequest> _parser = new pb::MessageParser<RemoveAttachmentsInTaskRequest>(() => new RemoveAttachmentsInTaskRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveAttachmentsInTaskRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAttachmentsInTaskRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAttachmentsInTaskRequest(RemoveAttachmentsInTaskRequest other) : this() {
      taskId_ = other.taskId_;
      fileIds_ = other.fileIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAttachmentsInTaskRequest Clone() {
      return new RemoveAttachmentsInTaskRequest(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    /// <summary>
    ///*
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileIds" field.</summary>
    public const int FileIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_fileIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> fileIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    ///附件id集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FileIds {
      get { return fileIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveAttachmentsInTaskRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveAttachmentsInTaskRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if(!fileIds_.Equals(other.fileIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      hash ^= fileIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      fileIds_.WriteTo(output, _repeated_fileIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      size += fileIds_.CalculateSize(_repeated_fileIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveAttachmentsInTaskRequest other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      fileIds_.Add(other.fileIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            fileIds_.AddEntriesFrom(input, _repeated_fileIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///添加讨论
  /// </summary>
  public sealed partial class AddTaskDiscussionInTaskRequest : pb::IMessage<AddTaskDiscussionInTaskRequest> {
    private static readonly pb::MessageParser<AddTaskDiscussionInTaskRequest> _parser = new pb::MessageParser<AddTaskDiscussionInTaskRequest>(() => new AddTaskDiscussionInTaskRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddTaskDiscussionInTaskRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTaskDiscussionInTaskRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTaskDiscussionInTaskRequest(AddTaskDiscussionInTaskRequest other) : this() {
      taskId_ = other.taskId_;
      discId_ = other.discId_;
      message_ = other.message_;
      mentionedAIds_ = other.mentionedAIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTaskDiscussionInTaskRequest Clone() {
      return new AddTaskDiscussionInTaskRequest(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    /// <summary>
    ///*
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "discId" field.</summary>
    public const int DiscIdFieldNumber = 2;
    private string discId_ = "";
    /// <summary>
    ///*
    ///讨论id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiscId {
      get { return discId_; }
      set {
        discId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    ///*
    ///讨论内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mentionedAIds" field.</summary>
    public const int MentionedAIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_mentionedAIds_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> mentionedAIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    ///@到的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MentionedAIds {
      get { return mentionedAIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddTaskDiscussionInTaskRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddTaskDiscussionInTaskRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (DiscId != other.DiscId) return false;
      if (Message != other.Message) return false;
      if(!mentionedAIds_.Equals(other.mentionedAIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (DiscId.Length != 0) hash ^= DiscId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      hash ^= mentionedAIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (DiscId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DiscId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      mentionedAIds_.WriteTo(output, _repeated_mentionedAIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (DiscId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscId);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += mentionedAIds_.CalculateSize(_repeated_mentionedAIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddTaskDiscussionInTaskRequest other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.DiscId.Length != 0) {
        DiscId = other.DiscId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      mentionedAIds_.Add(other.mentionedAIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            DiscId = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            mentionedAIds_.AddEntriesFrom(input, _repeated_mentionedAIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///删除讨论
  /// </summary>
  public sealed partial class RemoveTaskDiscussionRequest : pb::IMessage<RemoveTaskDiscussionRequest> {
    private static readonly pb::MessageParser<RemoveTaskDiscussionRequest> _parser = new pb::MessageParser<RemoveTaskDiscussionRequest>(() => new RemoveTaskDiscussionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveTaskDiscussionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTaskDiscussionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTaskDiscussionRequest(RemoveTaskDiscussionRequest other) : this() {
      taskId_ = other.taskId_;
      discId_ = other.discId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTaskDiscussionRequest Clone() {
      return new RemoveTaskDiscussionRequest(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    /// <summary>
    ///*
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "discId" field.</summary>
    public const int DiscIdFieldNumber = 2;
    private string discId_ = "";
    /// <summary>
    ///*
    ///讨论id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiscId {
      get { return discId_; }
      set {
        discId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveTaskDiscussionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveTaskDiscussionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (DiscId != other.DiscId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (DiscId.Length != 0) hash ^= DiscId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (DiscId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DiscId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (DiscId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveTaskDiscussionRequest other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.DiscId.Length != 0) {
        DiscId = other.DiscId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            DiscId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///修改任务
  /// </summary>
  public sealed partial class UpdateTasksRequest : pb::IMessage<UpdateTasksRequest> {
    private static readonly pb::MessageParser<UpdateTasksRequest> _parser = new pb::MessageParser<UpdateTasksRequest>(() => new UpdateTasksRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTasksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTasksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTasksRequest(UpdateTasksRequest other) : this() {
      methods_ = other.methods_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTasksRequest Clone() {
      return new UpdateTasksRequest(this);
    }

    /// <summary>Field number for the "methods" field.</summary>
    public const int MethodsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Elasticsearch.TaskMethod> _repeated_methods_codec
        = pb::FieldCodec.ForMessage(10, global::Elasticsearch.TaskMethod.Parser);
    private readonly pbc::RepeatedField<global::Elasticsearch.TaskMethod> methods_ = new pbc::RepeatedField<global::Elasticsearch.TaskMethod>();
    /// <summary>
    ///*
    ///修改任务对照表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Elasticsearch.TaskMethod> Methods {
      get { return methods_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTasksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTasksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!methods_.Equals(other.methods_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= methods_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      methods_.WriteTo(output, _repeated_methods_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += methods_.CalculateSize(_repeated_methods_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTasksRequest other) {
      if (other == null) {
        return;
      }
      methods_.Add(other.methods_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            methods_.AddEntriesFrom(input, _repeated_methods_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///批量增加任务
  /// </summary>
  public sealed partial class AddTasksRequest : pb::IMessage<AddTasksRequest> {
    private static readonly pb::MessageParser<AddTasksRequest> _parser = new pb::MessageParser<AddTasksRequest>(() => new AddTasksRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddTasksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTasksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTasksRequest(AddTasksRequest other) : this() {
      tasks_ = other.tasks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTasksRequest Clone() {
      return new AddTasksRequest(this);
    }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Elasticsearch.Task> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(10, global::Elasticsearch.Task.Parser);
    private readonly pbc::RepeatedField<global::Elasticsearch.Task> tasks_ = new pbc::RepeatedField<global::Elasticsearch.Task>();
    /// <summary>
    ///*
    ///任务集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Elasticsearch.Task> Tasks {
      get { return tasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddTasksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddTasksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tasks_.Equals(other.tasks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tasks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tasks_.WriteTo(output, _repeated_tasks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddTasksRequest other) {
      if (other == null) {
        return;
      }
      tasks_.Add(other.tasks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///批量根据任务id伪删除任务
  /// </summary>
  public sealed partial class RemoveTasksByTaskIdsRequest : pb::IMessage<RemoveTasksByTaskIdsRequest> {
    private static readonly pb::MessageParser<RemoveTasksByTaskIdsRequest> _parser = new pb::MessageParser<RemoveTasksByTaskIdsRequest>(() => new RemoveTasksByTaskIdsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveTasksByTaskIdsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTasksByTaskIdsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTasksByTaskIdsRequest(RemoveTasksByTaskIdsRequest other) : this() {
      taskIds_ = other.taskIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTasksByTaskIdsRequest Clone() {
      return new RemoveTasksByTaskIdsRequest(this);
    }

    /// <summary>Field number for the "taskIds" field.</summary>
    public const int TaskIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_taskIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> taskIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    ///任务id集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TaskIds {
      get { return taskIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveTasksByTaskIdsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveTasksByTaskIdsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!taskIds_.Equals(other.taskIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= taskIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskIds_.WriteTo(output, _repeated_taskIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskIds_.CalculateSize(_repeated_taskIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveTasksByTaskIdsRequest other) {
      if (other == null) {
        return;
      }
      taskIds_.Add(other.taskIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            taskIds_.AddEntriesFrom(input, _repeated_taskIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///批量根据项目id伪删除任务
  /// </summary>
  public sealed partial class RemoveTasksByFolderIdRequest : pb::IMessage<RemoveTasksByFolderIdRequest> {
    private static readonly pb::MessageParser<RemoveTasksByFolderIdRequest> _parser = new pb::MessageParser<RemoveTasksByFolderIdRequest>(() => new RemoveTasksByFolderIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveTasksByFolderIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTasksByFolderIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTasksByFolderIdRequest(RemoveTasksByFolderIdRequest other) : this() {
      folderId_ = other.folderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTasksByFolderIdRequest Clone() {
      return new RemoveTasksByFolderIdRequest(this);
    }

    /// <summary>Field number for the "folderId" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    ///*
    ///项目id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveTasksByFolderIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveTasksByFolderIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveTasksByFolderIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///批量修改指定项目id的所有任务冗余项目名
  /// </summary>
  public sealed partial class UpdateTasksFolderNameByFolderIdRequest : pb::IMessage<UpdateTasksFolderNameByFolderIdRequest> {
    private static readonly pb::MessageParser<UpdateTasksFolderNameByFolderIdRequest> _parser = new pb::MessageParser<UpdateTasksFolderNameByFolderIdRequest>(() => new UpdateTasksFolderNameByFolderIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTasksFolderNameByFolderIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTasksFolderNameByFolderIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTasksFolderNameByFolderIdRequest(UpdateTasksFolderNameByFolderIdRequest other) : this() {
      folderId_ = other.folderId_;
      folderName_ = other.folderName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTasksFolderNameByFolderIdRequest Clone() {
      return new UpdateTasksFolderNameByFolderIdRequest(this);
    }

    /// <summary>Field number for the "folderId" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    ///*
    ///项目id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folderName" field.</summary>
    public const int FolderNameFieldNumber = 2;
    private string folderName_ = "";
    /// <summary>
    ///*
    ///项目名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderName {
      get { return folderName_; }
      set {
        folderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTasksFolderNameByFolderIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTasksFolderNameByFolderIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (FolderName != other.FolderName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (FolderName.Length != 0) hash ^= FolderName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (FolderName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FolderName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (FolderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTasksFolderNameByFolderIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.FolderName.Length != 0) {
        FolderName = other.FolderName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 18: {
            FolderName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///解锁项目下所有任务的关系(将指定项目下的所有任务中冗余的folderid和foldername清空)
  /// </summary>
  public sealed partial class UnlockFolderAndTasksRequest : pb::IMessage<UnlockFolderAndTasksRequest> {
    private static readonly pb::MessageParser<UnlockFolderAndTasksRequest> _parser = new pb::MessageParser<UnlockFolderAndTasksRequest>(() => new UnlockFolderAndTasksRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockFolderAndTasksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockFolderAndTasksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockFolderAndTasksRequest(UnlockFolderAndTasksRequest other) : this() {
      folderId_ = other.folderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockFolderAndTasksRequest Clone() {
      return new UnlockFolderAndTasksRequest(this);
    }

    /// <summary>Field number for the "folderId" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    ///*
    ///项目id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockFolderAndTasksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockFolderAndTasksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockFolderAndTasksRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///附件
  /// </summary>
  public sealed partial class Attachment : pb::IMessage<Attachment> {
    private static readonly pb::MessageParser<Attachment> _parser = new pb::MessageParser<Attachment>(() => new Attachment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Attachment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attachment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attachment(Attachment other) : this() {
      fileId_ = other.fileId_;
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attachment Clone() {
      return new Attachment(this);
    }

    /// <summary>Field number for the "fileId" field.</summary>
    public const int FileIdFieldNumber = 1;
    private string fileId_ = "";
    /// <summary>
    ///*
    ///附件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileId {
      get { return fileId_; }
      set {
        fileId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    /// <summary>
    ///*
    ///附件内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Attachment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Attachment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileId != other.FileId) return false;
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileId.Length != 0) hash ^= FileId.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Attachment other) {
      if (other == null) {
        return;
      }
      if (other.FileId.Length != 0) {
        FileId = other.FileId;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FileId = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskMethod : pb::IMessage<TaskMethod> {
    private static readonly pb::MessageParser<TaskMethod> _parser = new pb::MessageParser<TaskMethod>(() => new TaskMethod());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskMethod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskMethod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskMethod(TaskMethod other) : this() {
      method_ = other.method_;
      Task = other.task_ != null ? other.Task.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskMethod Clone() {
      return new TaskMethod(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private global::Elasticsearch.TaskMethod.Types.Method method_ = 0;
    /// <summary>
    ///*
    ///修改类型枚举
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Elasticsearch.TaskMethod.Types.Method Method {
      get { return method_; }
      set {
        method_ = value;
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 2;
    private global::Elasticsearch.Task task_;
    /// <summary>
    ///*
    ///任务实体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Elasticsearch.Task Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskMethod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskMethod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (!object.Equals(Task, other.Task)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method != 0) hash ^= Method.GetHashCode();
      if (task_ != null) hash ^= Task.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Method);
      }
      if (task_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Task);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Method);
      }
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskMethod other) {
      if (other == null) {
        return;
      }
      if (other.Method != 0) {
        Method = other.Method;
      }
      if (other.task_ != null) {
        if (task_ == null) {
          task_ = new global::Elasticsearch.Task();
        }
        Task.MergeFrom(other.Task);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            method_ = (global::Elasticsearch.TaskMethod.Types.Method) input.ReadEnum();
            break;
          }
          case 18: {
            if (task_ == null) {
              task_ = new global::Elasticsearch.Task();
            }
            input.ReadMessage(task_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TaskMethod message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///*
      ///修改类型枚举
      /// </summary>
      public enum Method {
        /// <summary>
        ///*
        ///无效
        /// </summary>
        [pbr::OriginalName("Default")] Default = 0,
        /// <summary>
        ///*
        ///替换UpdateTime
        /// </summary>
        [pbr::OriginalName("Set_UpdateTime")] SetUpdateTime = 1,
        /// <summary>
        ///*
        ///替换CreateAccountId
        /// </summary>
        [pbr::OriginalName("Set_CreateAccountId")] SetCreateAccountId = 2,
        /// <summary>
        ///*
        ///替换TaskName
        /// </summary>
        [pbr::OriginalName("Set_TaskName")] SetTaskName = 3,
        /// <summary>
        ///*
        ///替换FolderId
        /// </summary>
        [pbr::OriginalName("Set_FolderId")] SetFolderId = 4,
        /// <summary>
        ///*
        ///替换FolderName
        /// </summary>
        [pbr::OriginalName("Set_FolderName")] SetFolderName = 5,
        /// <summary>
        ///*
        ///替换ParentId
        /// </summary>
        [pbr::OriginalName("Set_ParentId")] SetParentId = 6,
        /// <summary>
        ///*
        ///替换Content
        /// </summary>
        [pbr::OriginalName("Set_Content")] SetContent = 7,
        /// <summary>
        ///*
        ///替换StartTime
        /// </summary>
        [pbr::OriginalName("Set_StartTime")] SetStartTime = 8,
        /// <summary>
        ///*
        ///替换EndTime
        /// </summary>
        [pbr::OriginalName("Set_EndTime")] SetEndTime = 9,
        /// <summary>
        ///*
        ///替换Charge
        /// </summary>
        [pbr::OriginalName("Set_Charge")] SetCharge = 10,
        /// <summary>
        ///*
        ///替换Status
        /// </summary>
        [pbr::OriginalName("Set_Status")] SetStatus = 11,
        /// <summary>
        ///*
        ///替换CompleteTime
        /// </summary>
        [pbr::OriginalName("Set_CompleteTime")] SetCompleteTime = 12,
        /// <summary>
        ///*
        ///替换Keywords
        /// </summary>
        [pbr::OriginalName("Set_Keywords")] SetKeywords = 13,
        /// <summary>
        ///*
        ///删除指定memberIds
        /// </summary>
        [pbr::OriginalName("Pull_MemberIds")] PullMemberIds = 14,
        /// <summary>
        ///*
        ///添加指定memberIds
        /// </summary>
        [pbr::OriginalName("Push_MemberIds")] PushMemberIds = 15,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  ///任务
  /// </summary>
  public sealed partial class Task : pb::IMessage<Task> {
    private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task(Task other) : this() {
      taskId_ = other.taskId_;
      taskName_ = other.taskName_;
      folderId_ = other.folderId_;
      folderName_ = other.folderName_;
      parentId_ = other.parentId_;
      content_ = other.content_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      chargeAId_ = other.chargeAId_;
      status_ = other.status_;
      completeTime_ = other.completeTime_;
      memberIds_ = other.memberIds_.Clone();
      keywords_ = other.keywords_.Clone();
      appId_ = other.appId_;
      isDeleted_ = other.isDeleted_;
      updateTime_ = other.updateTime_;
      createTime_ = other.createTime_;
      projectId_ = other.projectId_;
      createAId_ = other.createAId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task Clone() {
      return new Task(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    /// <summary>
    ///*
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskName" field.</summary>
    public const int TaskNameFieldNumber = 2;
    private string taskName_ = "";
    /// <summary>
    ///*
    ///任务名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskName {
      get { return taskName_; }
      set {
        taskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folderId" field.</summary>
    public const int FolderIdFieldNumber = 3;
    private string folderId_ = "";
    /// <summary>
    ///*
    ///项目id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folderName" field.</summary>
    public const int FolderNameFieldNumber = 4;
    private string folderName_ = "";
    /// <summary>
    ///*
    ///项目名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderName {
      get { return folderName_; }
      set {
        folderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentId" field.</summary>
    public const int ParentIdFieldNumber = 5;
    private string parentId_ = "";
    /// <summary>
    ///*
    ///母任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentId {
      get { return parentId_; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 6;
    private string content_ = "";
    /// <summary>
    ///*
    ///任务详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 7;
    private long startTime_;
    /// <summary>
    ///*
    ///开始时间（无：0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 8;
    private long endTime_;
    /// <summary>
    ///*
    ///截止时间（无：0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "chargeAId" field.</summary>
    public const int ChargeAIdFieldNumber = 9;
    private string chargeAId_ = "";
    /// <summary>
    ///*
    ///负责人id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChargeAId {
      get { return chargeAId_; }
      set {
        chargeAId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 10;
    private int status_;
    /// <summary>
    ///*
    ///任务状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "completeTime" field.</summary>
    public const int CompleteTimeFieldNumber = 11;
    private long completeTime_;
    /// <summary>
    ///*
    ///完成时间（无：0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompleteTime {
      get { return completeTime_; }
      set {
        completeTime_ = value;
      }
    }

    /// <summary>Field number for the "memberIds" field.</summary>
    public const int MemberIdsFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_memberIds_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> memberIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    ///成员id集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MemberIds {
      get { return memberIds_; }
    }

    /// <summary>Field number for the "keywords" field.</summary>
    public const int KeywordsFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_keywords_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> keywords_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    ///控件关键字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Keywords {
      get { return keywords_; }
    }

    /// <summary>Field number for the "appId" field.</summary>
    public const int AppIdFieldNumber = 14;
    private string appId_ = "";
    /// <summary>
    ///*
    ///appId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isDeleted" field.</summary>
    public const int IsDeletedFieldNumber = 15;
    private bool isDeleted_;
    /// <summary>
    ///*
    ///是否已删除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDeleted {
      get { return isDeleted_; }
      set {
        isDeleted_ = value;
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 16;
    private long updateTime_;
    /// <summary>
    ///*
    ///变更时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 17;
    private long createTime_;
    /// <summary>
    ///*
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 18;
    private string projectId_ = "";
    /// <summary>
    ///*
    ///网络id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createAId" field.</summary>
    public const int CreateAIdFieldNumber = 19;
    private string createAId_ = "";
    /// <summary>
    ///*
    ///创建者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateAId {
      get { return createAId_; }
      set {
        createAId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (TaskName != other.TaskName) return false;
      if (FolderId != other.FolderId) return false;
      if (FolderName != other.FolderName) return false;
      if (ParentId != other.ParentId) return false;
      if (Content != other.Content) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (ChargeAId != other.ChargeAId) return false;
      if (Status != other.Status) return false;
      if (CompleteTime != other.CompleteTime) return false;
      if(!memberIds_.Equals(other.memberIds_)) return false;
      if(!keywords_.Equals(other.keywords_)) return false;
      if (AppId != other.AppId) return false;
      if (IsDeleted != other.IsDeleted) return false;
      if (UpdateTime != other.UpdateTime) return false;
      if (CreateTime != other.CreateTime) return false;
      if (ProjectId != other.ProjectId) return false;
      if (CreateAId != other.CreateAId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (TaskName.Length != 0) hash ^= TaskName.GetHashCode();
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (FolderName.Length != 0) hash ^= FolderName.GetHashCode();
      if (ParentId.Length != 0) hash ^= ParentId.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (ChargeAId.Length != 0) hash ^= ChargeAId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CompleteTime != 0L) hash ^= CompleteTime.GetHashCode();
      hash ^= memberIds_.GetHashCode();
      hash ^= keywords_.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (IsDeleted != false) hash ^= IsDeleted.GetHashCode();
      if (UpdateTime != 0L) hash ^= UpdateTime.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (CreateAId.Length != 0) hash ^= CreateAId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (TaskName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TaskName);
      }
      if (FolderId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FolderId);
      }
      if (FolderName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FolderName);
      }
      if (ParentId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ParentId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Content);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(EndTime);
      }
      if (ChargeAId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ChargeAId);
      }
      if (Status != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Status);
      }
      if (CompleteTime != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(CompleteTime);
      }
      memberIds_.WriteTo(output, _repeated_memberIds_codec);
      keywords_.WriteTo(output, _repeated_keywords_codec);
      if (AppId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(AppId);
      }
      if (IsDeleted != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsDeleted);
      }
      if (UpdateTime != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(UpdateTime);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(CreateTime);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ProjectId);
      }
      if (CreateAId.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CreateAId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (TaskName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskName);
      }
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (FolderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderName);
      }
      if (ParentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (ChargeAId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChargeAId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (CompleteTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompleteTime);
      }
      size += memberIds_.CalculateSize(_repeated_memberIds_codec);
      size += keywords_.CalculateSize(_repeated_keywords_codec);
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (IsDeleted != false) {
        size += 1 + 1;
      }
      if (UpdateTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UpdateTime);
      }
      if (CreateTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (ProjectId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (CreateAId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CreateAId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.TaskName.Length != 0) {
        TaskName = other.TaskName;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.FolderName.Length != 0) {
        FolderName = other.FolderName;
      }
      if (other.ParentId.Length != 0) {
        ParentId = other.ParentId;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.ChargeAId.Length != 0) {
        ChargeAId = other.ChargeAId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CompleteTime != 0L) {
        CompleteTime = other.CompleteTime;
      }
      memberIds_.Add(other.memberIds_);
      keywords_.Add(other.keywords_);
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.IsDeleted != false) {
        IsDeleted = other.IsDeleted;
      }
      if (other.UpdateTime != 0L) {
        UpdateTime = other.UpdateTime;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.CreateAId.Length != 0) {
        CreateAId = other.CreateAId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            TaskName = input.ReadString();
            break;
          }
          case 26: {
            FolderId = input.ReadString();
            break;
          }
          case 34: {
            FolderName = input.ReadString();
            break;
          }
          case 42: {
            ParentId = input.ReadString();
            break;
          }
          case 50: {
            Content = input.ReadString();
            break;
          }
          case 56: {
            StartTime = input.ReadInt64();
            break;
          }
          case 64: {
            EndTime = input.ReadInt64();
            break;
          }
          case 74: {
            ChargeAId = input.ReadString();
            break;
          }
          case 80: {
            Status = input.ReadInt32();
            break;
          }
          case 88: {
            CompleteTime = input.ReadInt64();
            break;
          }
          case 98: {
            memberIds_.AddEntriesFrom(input, _repeated_memberIds_codec);
            break;
          }
          case 106: {
            keywords_.AddEntriesFrom(input, _repeated_keywords_codec);
            break;
          }
          case 114: {
            AppId = input.ReadString();
            break;
          }
          case 120: {
            IsDeleted = input.ReadBool();
            break;
          }
          case 128: {
            UpdateTime = input.ReadInt64();
            break;
          }
          case 136: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 146: {
            ProjectId = input.ReadString();
            break;
          }
          case 154: {
            CreateAId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///任务返回信息
  /// </summary>
  public sealed partial class TaskDto : pb::IMessage<TaskDto> {
    private static readonly pb::MessageParser<TaskDto> _parser = new pb::MessageParser<TaskDto>(() => new TaskDto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskDto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDto(TaskDto other) : this() {
      taskId_ = other.taskId_;
      createAid_ = other.createAid_;
      taskName_ = other.taskName_;
      content_ = other.content_;
      projectId_ = other.projectId_;
      createTime_ = other.createTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDto Clone() {
      return new TaskDto(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    /// <summary>
    ///*
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createAid" field.</summary>
    public const int CreateAidFieldNumber = 2;
    private string createAid_ = "";
    /// <summary>
    ///*
    ///创建者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateAid {
      get { return createAid_; }
      set {
        createAid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskName" field.</summary>
    public const int TaskNameFieldNumber = 3;
    private string taskName_ = "";
    /// <summary>
    ///*
    ///任务名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskName {
      get { return taskName_; }
      set {
        taskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 4;
    private string content_ = "";
    /// <summary>
    ///*
    ///任务内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 5;
    private string projectId_ = "";
    /// <summary>
    ///*
    ///网络Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private long createTime_;
    /// <summary>
    ///*
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskDto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskDto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (CreateAid != other.CreateAid) return false;
      if (TaskName != other.TaskName) return false;
      if (Content != other.Content) return false;
      if (ProjectId != other.ProjectId) return false;
      if (CreateTime != other.CreateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (CreateAid.Length != 0) hash ^= CreateAid.GetHashCode();
      if (TaskName.Length != 0) hash ^= TaskName.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (CreateAid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CreateAid);
      }
      if (TaskName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TaskName);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Content);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ProjectId);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (CreateAid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateAid);
      }
      if (TaskName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskName);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskDto other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.CreateAid.Length != 0) {
        CreateAid = other.CreateAid;
      }
      if (other.TaskName.Length != 0) {
        TaskName = other.TaskName;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            CreateAid = input.ReadString();
            break;
          }
          case 26: {
            TaskName = input.ReadString();
            break;
          }
          case 34: {
            Content = input.ReadString();
            break;
          }
          case 42: {
            ProjectId = input.ReadString();
            break;
          }
          case 48: {
            CreateTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
