// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ESService.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Elasticsearch {
  public static partial class ESService
  {
    static readonly string __ServiceName = "Elasticsearch.ESService";

    static readonly grpc::Marshaller<global::Elasticsearch.SearchTasksRequest> __Marshaller_SearchTasksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.SearchTasksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elasticsearch.SearchTasksResult> __Marshaller_SearchTasksResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.SearchTasksResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elasticsearch.AddAttachmentsIntoTaskRequest> __Marshaller_AddAttachmentsIntoTaskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.AddAttachmentsIntoTaskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elasticsearch.ExecuteResult> __Marshaller_ExecuteResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.ExecuteResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elasticsearch.RemoveAttachmentsInTaskRequest> __Marshaller_RemoveAttachmentsInTaskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.RemoveAttachmentsInTaskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elasticsearch.AddTaskDiscussionInTaskRequest> __Marshaller_AddTaskDiscussionInTaskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.AddTaskDiscussionInTaskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elasticsearch.RemoveTaskDiscussionRequest> __Marshaller_RemoveTaskDiscussionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.RemoveTaskDiscussionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elasticsearch.UpdateTasksRequest> __Marshaller_UpdateTasksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.UpdateTasksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elasticsearch.AddTasksRequest> __Marshaller_AddTasksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.AddTasksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elasticsearch.RemoveTasksByTaskIdsRequest> __Marshaller_RemoveTasksByTaskIdsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.RemoveTasksByTaskIdsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elasticsearch.RemoveTasksByFolderIdRequest> __Marshaller_RemoveTasksByFolderIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.RemoveTasksByFolderIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elasticsearch.UpdateTasksFolderNameByFolderIdRequest> __Marshaller_UpdateTasksFolderNameByFolderIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.UpdateTasksFolderNameByFolderIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Elasticsearch.UnlockFolderAndTasksRequest> __Marshaller_UnlockFolderAndTasksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Elasticsearch.UnlockFolderAndTasksRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Elasticsearch.SearchTasksRequest, global::Elasticsearch.SearchTasksResult> __Method_SearchTasks = new grpc::Method<global::Elasticsearch.SearchTasksRequest, global::Elasticsearch.SearchTasksResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchTasks",
        __Marshaller_SearchTasksRequest,
        __Marshaller_SearchTasksResult);

    static readonly grpc::Method<global::Elasticsearch.AddAttachmentsIntoTaskRequest, global::Elasticsearch.ExecuteResult> __Method_AddAttachmentsIntoTask = new grpc::Method<global::Elasticsearch.AddAttachmentsIntoTaskRequest, global::Elasticsearch.ExecuteResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddAttachmentsIntoTask",
        __Marshaller_AddAttachmentsIntoTaskRequest,
        __Marshaller_ExecuteResult);

    static readonly grpc::Method<global::Elasticsearch.RemoveAttachmentsInTaskRequest, global::Elasticsearch.ExecuteResult> __Method_RemoveAttachmentsInTask = new grpc::Method<global::Elasticsearch.RemoveAttachmentsInTaskRequest, global::Elasticsearch.ExecuteResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveAttachmentsInTask",
        __Marshaller_RemoveAttachmentsInTaskRequest,
        __Marshaller_ExecuteResult);

    static readonly grpc::Method<global::Elasticsearch.AddTaskDiscussionInTaskRequest, global::Elasticsearch.ExecuteResult> __Method_AddTaskDiscussionInTask = new grpc::Method<global::Elasticsearch.AddTaskDiscussionInTaskRequest, global::Elasticsearch.ExecuteResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddTaskDiscussionInTask",
        __Marshaller_AddTaskDiscussionInTaskRequest,
        __Marshaller_ExecuteResult);

    static readonly grpc::Method<global::Elasticsearch.RemoveTaskDiscussionRequest, global::Elasticsearch.ExecuteResult> __Method_RemoveTaskDiscussion = new grpc::Method<global::Elasticsearch.RemoveTaskDiscussionRequest, global::Elasticsearch.ExecuteResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveTaskDiscussion",
        __Marshaller_RemoveTaskDiscussionRequest,
        __Marshaller_ExecuteResult);

    static readonly grpc::Method<global::Elasticsearch.UpdateTasksRequest, global::Elasticsearch.ExecuteResult> __Method_UpdateTasks = new grpc::Method<global::Elasticsearch.UpdateTasksRequest, global::Elasticsearch.ExecuteResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTasks",
        __Marshaller_UpdateTasksRequest,
        __Marshaller_ExecuteResult);

    static readonly grpc::Method<global::Elasticsearch.AddTasksRequest, global::Elasticsearch.ExecuteResult> __Method_AddTasks = new grpc::Method<global::Elasticsearch.AddTasksRequest, global::Elasticsearch.ExecuteResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddTasks",
        __Marshaller_AddTasksRequest,
        __Marshaller_ExecuteResult);

    static readonly grpc::Method<global::Elasticsearch.RemoveTasksByTaskIdsRequest, global::Elasticsearch.ExecuteResult> __Method_RemoveTasksByTaskIds = new grpc::Method<global::Elasticsearch.RemoveTasksByTaskIdsRequest, global::Elasticsearch.ExecuteResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveTasksByTaskIds",
        __Marshaller_RemoveTasksByTaskIdsRequest,
        __Marshaller_ExecuteResult);

    static readonly grpc::Method<global::Elasticsearch.RemoveTasksByFolderIdRequest, global::Elasticsearch.ExecuteResult> __Method_RemoveTasksByFolderId = new grpc::Method<global::Elasticsearch.RemoveTasksByFolderIdRequest, global::Elasticsearch.ExecuteResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveTasksByFolderId",
        __Marshaller_RemoveTasksByFolderIdRequest,
        __Marshaller_ExecuteResult);

    static readonly grpc::Method<global::Elasticsearch.UpdateTasksFolderNameByFolderIdRequest, global::Elasticsearch.ExecuteResult> __Method_UpdateTasksFolderNameByFolderId = new grpc::Method<global::Elasticsearch.UpdateTasksFolderNameByFolderIdRequest, global::Elasticsearch.ExecuteResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTasksFolderNameByFolderId",
        __Marshaller_UpdateTasksFolderNameByFolderIdRequest,
        __Marshaller_ExecuteResult);

    static readonly grpc::Method<global::Elasticsearch.UnlockFolderAndTasksRequest, global::Elasticsearch.ExecuteResult> __Method_UnlockFolderAndTasks = new grpc::Method<global::Elasticsearch.UnlockFolderAndTasksRequest, global::Elasticsearch.ExecuteResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnlockFolderAndTasks",
        __Marshaller_UnlockFolderAndTasksRequest,
        __Marshaller_ExecuteResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Elasticsearch.ESServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ESService</summary>
    public abstract partial class ESServiceBase
    {
      /// <summary>
      ///*
      ///发送讨论
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Elasticsearch.SearchTasksResult> SearchTasks(global::Elasticsearch.SearchTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///添加附件
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Elasticsearch.ExecuteResult> AddAttachmentsIntoTask(global::Elasticsearch.AddAttachmentsIntoTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///删除附件
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Elasticsearch.ExecuteResult> RemoveAttachmentsInTask(global::Elasticsearch.RemoveAttachmentsInTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///添加讨论
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Elasticsearch.ExecuteResult> AddTaskDiscussionInTask(global::Elasticsearch.AddTaskDiscussionInTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///删除讨论
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Elasticsearch.ExecuteResult> RemoveTaskDiscussion(global::Elasticsearch.RemoveTaskDiscussionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///修改任务
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Elasticsearch.ExecuteResult> UpdateTasks(global::Elasticsearch.UpdateTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///批量增加任务
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Elasticsearch.ExecuteResult> AddTasks(global::Elasticsearch.AddTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///批量根据任务id伪删除任务
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Elasticsearch.ExecuteResult> RemoveTasksByTaskIds(global::Elasticsearch.RemoveTasksByTaskIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///批量根据项目id伪删除任务
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Elasticsearch.ExecuteResult> RemoveTasksByFolderId(global::Elasticsearch.RemoveTasksByFolderIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///批量修改指定项目id的所有任务冗余项目名
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Elasticsearch.ExecuteResult> UpdateTasksFolderNameByFolderId(global::Elasticsearch.UpdateTasksFolderNameByFolderIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///解锁项目下所有任务的关系(将指定项目下的所有任务中冗余的folderid和foldername清空)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Elasticsearch.ExecuteResult> UnlockFolderAndTasks(global::Elasticsearch.UnlockFolderAndTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ESService</summary>
    public partial class ESServiceClient : grpc::ClientBase<ESServiceClient>
    {
      /// <summary>Creates a new client for ESService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ESServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ESService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ESServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ESServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ESServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      ///发送讨论
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.SearchTasksResult SearchTasks(global::Elasticsearch.SearchTasksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///发送讨论
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.SearchTasksResult SearchTasks(global::Elasticsearch.SearchTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchTasks, null, options, request);
      }
      /// <summary>
      ///*
      ///发送讨论
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.SearchTasksResult> SearchTasksAsync(global::Elasticsearch.SearchTasksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///发送讨论
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.SearchTasksResult> SearchTasksAsync(global::Elasticsearch.SearchTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchTasks, null, options, request);
      }
      /// <summary>
      ///*
      ///添加附件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult AddAttachmentsIntoTask(global::Elasticsearch.AddAttachmentsIntoTaskRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAttachmentsIntoTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///添加附件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult AddAttachmentsIntoTask(global::Elasticsearch.AddAttachmentsIntoTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddAttachmentsIntoTask, null, options, request);
      }
      /// <summary>
      ///*
      ///添加附件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> AddAttachmentsIntoTaskAsync(global::Elasticsearch.AddAttachmentsIntoTaskRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAttachmentsIntoTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///添加附件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> AddAttachmentsIntoTaskAsync(global::Elasticsearch.AddAttachmentsIntoTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddAttachmentsIntoTask, null, options, request);
      }
      /// <summary>
      ///*
      ///删除附件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult RemoveAttachmentsInTask(global::Elasticsearch.RemoveAttachmentsInTaskRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveAttachmentsInTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///删除附件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult RemoveAttachmentsInTask(global::Elasticsearch.RemoveAttachmentsInTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveAttachmentsInTask, null, options, request);
      }
      /// <summary>
      ///*
      ///删除附件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> RemoveAttachmentsInTaskAsync(global::Elasticsearch.RemoveAttachmentsInTaskRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveAttachmentsInTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///删除附件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> RemoveAttachmentsInTaskAsync(global::Elasticsearch.RemoveAttachmentsInTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveAttachmentsInTask, null, options, request);
      }
      /// <summary>
      ///*
      ///添加讨论
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult AddTaskDiscussionInTask(global::Elasticsearch.AddTaskDiscussionInTaskRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddTaskDiscussionInTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///添加讨论
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult AddTaskDiscussionInTask(global::Elasticsearch.AddTaskDiscussionInTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddTaskDiscussionInTask, null, options, request);
      }
      /// <summary>
      ///*
      ///添加讨论
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> AddTaskDiscussionInTaskAsync(global::Elasticsearch.AddTaskDiscussionInTaskRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddTaskDiscussionInTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///添加讨论
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> AddTaskDiscussionInTaskAsync(global::Elasticsearch.AddTaskDiscussionInTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddTaskDiscussionInTask, null, options, request);
      }
      /// <summary>
      ///*
      ///删除讨论
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult RemoveTaskDiscussion(global::Elasticsearch.RemoveTaskDiscussionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveTaskDiscussion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///删除讨论
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult RemoveTaskDiscussion(global::Elasticsearch.RemoveTaskDiscussionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveTaskDiscussion, null, options, request);
      }
      /// <summary>
      ///*
      ///删除讨论
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> RemoveTaskDiscussionAsync(global::Elasticsearch.RemoveTaskDiscussionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveTaskDiscussionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///删除讨论
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> RemoveTaskDiscussionAsync(global::Elasticsearch.RemoveTaskDiscussionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveTaskDiscussion, null, options, request);
      }
      /// <summary>
      ///*
      ///修改任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult UpdateTasks(global::Elasticsearch.UpdateTasksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///修改任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult UpdateTasks(global::Elasticsearch.UpdateTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTasks, null, options, request);
      }
      /// <summary>
      ///*
      ///修改任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> UpdateTasksAsync(global::Elasticsearch.UpdateTasksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///修改任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> UpdateTasksAsync(global::Elasticsearch.UpdateTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTasks, null, options, request);
      }
      /// <summary>
      ///*
      ///批量增加任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult AddTasks(global::Elasticsearch.AddTasksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///批量增加任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult AddTasks(global::Elasticsearch.AddTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddTasks, null, options, request);
      }
      /// <summary>
      ///*
      ///批量增加任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> AddTasksAsync(global::Elasticsearch.AddTasksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///批量增加任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> AddTasksAsync(global::Elasticsearch.AddTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddTasks, null, options, request);
      }
      /// <summary>
      ///*
      ///批量根据任务id伪删除任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult RemoveTasksByTaskIds(global::Elasticsearch.RemoveTasksByTaskIdsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveTasksByTaskIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///批量根据任务id伪删除任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult RemoveTasksByTaskIds(global::Elasticsearch.RemoveTasksByTaskIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveTasksByTaskIds, null, options, request);
      }
      /// <summary>
      ///*
      ///批量根据任务id伪删除任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> RemoveTasksByTaskIdsAsync(global::Elasticsearch.RemoveTasksByTaskIdsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveTasksByTaskIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///批量根据任务id伪删除任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> RemoveTasksByTaskIdsAsync(global::Elasticsearch.RemoveTasksByTaskIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveTasksByTaskIds, null, options, request);
      }
      /// <summary>
      ///*
      ///批量根据项目id伪删除任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult RemoveTasksByFolderId(global::Elasticsearch.RemoveTasksByFolderIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveTasksByFolderId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///批量根据项目id伪删除任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult RemoveTasksByFolderId(global::Elasticsearch.RemoveTasksByFolderIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveTasksByFolderId, null, options, request);
      }
      /// <summary>
      ///*
      ///批量根据项目id伪删除任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> RemoveTasksByFolderIdAsync(global::Elasticsearch.RemoveTasksByFolderIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveTasksByFolderIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///批量根据项目id伪删除任务
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> RemoveTasksByFolderIdAsync(global::Elasticsearch.RemoveTasksByFolderIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveTasksByFolderId, null, options, request);
      }
      /// <summary>
      ///*
      ///批量修改指定项目id的所有任务冗余项目名
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult UpdateTasksFolderNameByFolderId(global::Elasticsearch.UpdateTasksFolderNameByFolderIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateTasksFolderNameByFolderId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///批量修改指定项目id的所有任务冗余项目名
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult UpdateTasksFolderNameByFolderId(global::Elasticsearch.UpdateTasksFolderNameByFolderIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTasksFolderNameByFolderId, null, options, request);
      }
      /// <summary>
      ///*
      ///批量修改指定项目id的所有任务冗余项目名
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> UpdateTasksFolderNameByFolderIdAsync(global::Elasticsearch.UpdateTasksFolderNameByFolderIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateTasksFolderNameByFolderIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///批量修改指定项目id的所有任务冗余项目名
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> UpdateTasksFolderNameByFolderIdAsync(global::Elasticsearch.UpdateTasksFolderNameByFolderIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTasksFolderNameByFolderId, null, options, request);
      }
      /// <summary>
      ///*
      ///解锁项目下所有任务的关系(将指定项目下的所有任务中冗余的folderid和foldername清空)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult UnlockFolderAndTasks(global::Elasticsearch.UnlockFolderAndTasksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UnlockFolderAndTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///解锁项目下所有任务的关系(将指定项目下的所有任务中冗余的folderid和foldername清空)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Elasticsearch.ExecuteResult UnlockFolderAndTasks(global::Elasticsearch.UnlockFolderAndTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnlockFolderAndTasks, null, options, request);
      }
      /// <summary>
      ///*
      ///解锁项目下所有任务的关系(将指定项目下的所有任务中冗余的folderid和foldername清空)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> UnlockFolderAndTasksAsync(global::Elasticsearch.UnlockFolderAndTasksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UnlockFolderAndTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///解锁项目下所有任务的关系(将指定项目下的所有任务中冗余的folderid和foldername清空)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Elasticsearch.ExecuteResult> UnlockFolderAndTasksAsync(global::Elasticsearch.UnlockFolderAndTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnlockFolderAndTasks, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ESServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ESServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ESServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SearchTasks, serviceImpl.SearchTasks)
          .AddMethod(__Method_AddAttachmentsIntoTask, serviceImpl.AddAttachmentsIntoTask)
          .AddMethod(__Method_RemoveAttachmentsInTask, serviceImpl.RemoveAttachmentsInTask)
          .AddMethod(__Method_AddTaskDiscussionInTask, serviceImpl.AddTaskDiscussionInTask)
          .AddMethod(__Method_RemoveTaskDiscussion, serviceImpl.RemoveTaskDiscussion)
          .AddMethod(__Method_UpdateTasks, serviceImpl.UpdateTasks)
          .AddMethod(__Method_AddTasks, serviceImpl.AddTasks)
          .AddMethod(__Method_RemoveTasksByTaskIds, serviceImpl.RemoveTasksByTaskIds)
          .AddMethod(__Method_RemoveTasksByFolderId, serviceImpl.RemoveTasksByFolderId)
          .AddMethod(__Method_UpdateTasksFolderNameByFolderId, serviceImpl.UpdateTasksFolderNameByFolderId)
          .AddMethod(__Method_UnlockFolderAndTasks, serviceImpl.UnlockFolderAndTasks).Build();
    }

  }
}
#endregion
